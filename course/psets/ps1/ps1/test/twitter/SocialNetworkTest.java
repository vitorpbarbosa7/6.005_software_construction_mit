/* Copyright (c) 2007-2016 MIT 6.005 course staff, all rights reserved.
 * Redistribution of original or derived work requires permission of course staff.
 */
package twitter;

import static org.junit.Assert.*;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

import org.junit.Test;

public class SocialNetworkTest {

    /*
     * TODO: your testing strategies for these methods should go here.
     * See the ic03-testing exercise for examples of what a testing strategy comment looks like.
     * Make sure you have partitions.
     */
    private static final Instant d1 = Instant.parse("2016-02-17T10:00:00Z");
    private static final Instant d2 = Instant.parse("2016-02-17T11:00:00Z");
    // Additional tweet timestamps
    private static final Instant d3 = Instant.parse("2016-02-17T12:00:00Z");
    private static final Instant d4 = Instant.parse("2016-02-17T12:00:00Z");
    private static final Instant d5 = Instant.parse("2016-02-17T13:00:00Z");
    private static final Instant d6 = Instant.parse("2016-02-17T14:00:00Z");
    private static final Instant d7 = Instant.parse("2016-02-17T15:00:00Z");
    private static final Instant d8 = Instant.parse("2024-02-17T15:00:00Z");

   
    // tweets objects
    private static final Tweet tweet1 = new Tweet(1, "knuth", "Great insights from @turing and @lovelace!", d1); // 1 mention for turing, 1 for lovelace
    private static final Tweet tweet2 = new Tweet(2, "turing", "Thank you @knuth for your ideas", d2); // 1 mention for knuth
    private static final Tweet tweet3 = new Tweet(3, "turing", "Also inspired by @knuth's work recently", d3); // 1 mention for knuth
    private static final Tweet tweet4 = new Tweet(4, "lovelace", "Appreciate @knuth  @turing for his contributions", d4); // 1 mention for knuth
    private static final Tweet tweet5 = new Tweet(5, "musk", "Dreaming of the stars with no one in particular", d5); // No mentions   
    
    
    // # hashtag thing
    // Additional tweet timestamps
    private static final Instant d9 = Instant.parse("2024-02-17T16:00:00Z");
    private static final Instant d10 = Instant.parse("2024-02-17T17:00:00Z");

    // New tweets with #mit hashtag
    private static final Tweet tweet6 = new Tweet(6, "ada", "Excited to attend #mit conference!", d9); 
    private static final Tweet tweet7 = new Tweet(7, "alan", "Learning so much from #mit resources!", d10);
    private static final Tweet tweet10 = new Tweet(8, "bellman", "hi @alan", d9);

    // Transitive Closure test
    private static final Tweet tweet11 = new Tweet(9, "neumman", "Hi @dijkstra", d7);
    private static final Tweet tweet12 = new Tweet(10, "dijkstra", "Hi @babbage", d9);

    
    @Test(expected=AssertionError.class)
    public void testAssertionsEnabled() {
        assert false; // make sure assertions are enabled with VM argument: -ea
    }
    
    @Test
    public void testGuessFollowsGraphEmpty() {
        Map<String, Set<String>> followsGraph = SocialNetwork.guessFollowsGraph(new ArrayList<>());
        
        assertTrue("expected empty graph", followsGraph.isEmpty());
    }

    @Test
    public void testGuessFollowsGraphCase01() {

        // return from function
        List<Tweet> tweetList01 = new ArrayList<>(List.of(tweet1, tweet2));
        Map<String, Set<String>> followsGraph01 = SocialNetwork.guessFollowsGraph(tweetList01);

        // created desired result
        Map<String, Set<String>> realHashMap01 = new HashMap<>(); 
        Set<String> HashSetKnuth = new HashSet<>();
        HashSetKnuth.add("turing"); 
        HashSetKnuth.add("lovelace"); 
        realHashMap01.put("knuth", HashSetKnuth);

        // compare
        assertEquals("espect the same hash set values", realHashMap01.get("knuth"), followsGraph01.get("knuth"));

    }

    @Test
    public void testGuessFollowsGraphMultipleMentionsByDifferentAuthors() {
        // List of tweets where different users mention various other users
        List<Tweet> tweetList = Arrays.asList(tweet1, tweet2, tweet3, tweet4, tweet5);

        // Expected graph where each user follows the mentioned users
        Map<String, Set<String>> expectedGraph = new HashMap<>();
        expectedGraph.put("knuth", new HashSet<>(Arrays.asList("turing", "lovelace"))); // "knuth" follows "turing" and "lovelace"
        expectedGraph.put("turing", new HashSet<>(Arrays.asList("knuth"))); // "turing" follows "knuth"
        expectedGraph.put("lovelace", new HashSet<>(Arrays.asList("knuth", "turing"))); // "lovelace" follows "knuth" and "turing"
        expectedGraph.put("musk", new HashSet<>()); // "musk" follows no one

        // Actual graph generated by the function
        Map<String, Set<String>> followsGraph = SocialNetwork.guessFollowsGraph(tweetList);

        assertEquals("expected correct follow relationships for multiple mentions", expectedGraph, followsGraph);
    }

    @Test
    public void testGuessFollowsGraphNoMentions() {
        // List of tweets with no mentions
        List<Tweet> tweetListNoMentions = Arrays.asList(tweet5);

        // Expected graph is empty since no one mentions anyone
        Map<String, Set<String>> expectedGraph = new HashMap<>();
        Set<String> emptyList = new HashSet<>();
        expectedGraph.put(tweet5.getAuthor(), emptyList);

        // Actual graph generated by the function
        Map<String, Set<String>> followsGraph = SocialNetwork.guessFollowsGraph(tweetListNoMentions);

        assertEquals("expected empty graph for tweets with no mentions", expectedGraph, followsGraph);
    }

    @Test
    public void testGuessFollowsGraphHashtagMIT() {
          // List of tweets including #mit hashtag and a mention
    List<Tweet> tweetListWithMITAndMention = Arrays.asList(tweet6, tweet7, tweet10);

    // Expected graph:
    // - "ada" and "alan" should follow each other due to #mit hashtag.
    // - "bellman" should follow "alan" due to the @ mention.

    Map<String, Set<String>> expectedGraph = new HashMap<>();
    expectedGraph.put("ada", new HashSet<>(Arrays.asList("alan"))); // "ada" follows "alan" due to #mit
    expectedGraph.put("alan", new HashSet<>(Arrays.asList("ada"))); // "alan" follows "ada" due to #mit
    expectedGraph.put("bellman", new HashSet<>(Arrays.asList("alan"))); // "bellman" follows "alan" due to @ mention

    // Actual graph generated by the function
    Map<String, Set<String>> followsGraph = SocialNetwork.guessFollowsGraph(tweetListWithMITAndMention);

    assertEquals("expected correct follow relationships for #mit hashtag and @ mention", expectedGraph, followsGraph);
    }

    @Test
    public void testGuessFollowsGraphTransitiveClosure() {
          // List of tweets including #mit hashtag and a mention
    List<Tweet> tweetListTransitiveClosure = Arrays.asList(tweet11, tweet12);

    // Expected graph:
    // - "ada" and "alan" should follow each other due to #mit hashtag.
    // - "bellman" should follow "alan" due to the @ mention.

    Map<String, Set<String>> expectedGraph = new HashMap<>();
    expectedGraph.put("newmann", new HashSet<>(Arrays.asList("babbage", "dijkstra"))); // "ada" follows "alan" due to #mit
    expectedGraph.put("dijkstra", new HashSet<>(Arrays.asList("babbage", "neumman"))); // "alan" follows "ada" due to #mit
    expectedGraph.put("babbage", new HashSet<>(Arrays.asList()));

    // Actual graph generated by the function
    Map<String, Set<String>> followsGraph = SocialNetwork.guessFollowsGraph(tweetListTransitiveClosure);

    assertEquals("consider @, #, and transitive closure", expectedGraph, followsGraph);
    }
    
    @Test
    public void testInfluencersEmpty() {
        Map<String, Set<String>> followsGraph = new HashMap<>();
        List<String> influencers = SocialNetwork.influencers(followsGraph);
        
        assertTrue("expected empty list", influencers.isEmpty());
    }

    @Test
    public void testInfluencerSequenceFull() {
        Map<String, Set<String>> followsGraphFull = new HashMap<>();

        List<Tweet> tweets = Arrays.asList(tweet1, tweet2, tweet3, tweet4, tweet5);
        followsGraphFull = SocialNetwork.guessFollowsGraph(tweets);

        List<String> expectedList = Arrays.asList("knuth","turing","lovelace","musk");
        List<String> influencersFull = SocialNetwork.influencers(followsGraphFull);

        assertEquals("must be equal", expectedList, influencersFull);
    }
    /*
     * Warning: all the tests you write here must be runnable against any
     * SocialNetwork class that follows the spec. It will be run against several
     * staff implementations of SocialNetwork, which will be done by overwriting
     * (temporarily) your version of SocialNetwork with the staff's version.
     * DO NOT strengthen the spec of SocialNetwork or its methods.
     * 
     * In particular, your test cases must not call helper methods of your own
     * that you have put in SocialNetwork, because that means you're testing a
     * stronger spec than SocialNetwork says. If you need such helper methods,
     * define them in a different class. If you only need them in this test
     * class, then keep them in this test class.
     */

}
